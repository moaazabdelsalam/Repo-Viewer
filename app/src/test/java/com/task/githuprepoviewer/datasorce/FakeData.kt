package com.task.githuprepoviewer.datasorce

import com.task.githuprepoviewer.data.local.db.LocalRepositoryItem
import com.task.githuprepoviewer.data.remote.model.License
import com.task.githuprepoviewer.data.remote.model.Organization
import com.task.githuprepoviewer.data.remote.model.Owner
import com.task.githuprepoviewer.data.remote.model.Reactions
import com.task.githuprepoviewer.data.remote.model.RepositoryDetailsResponse
import com.task.githuprepoviewer.data.remote.model.RepositoryIssuesResponse
import com.task.githuprepoviewer.data.remote.model.User

object FakeData {
    val fakeRepositoryDetailsResponse = RepositoryDetailsResponse(
        allowForking = true,
        archiveUrl = "https://example.com/archive",
        archived = false,
        assigneesUrl = "https://example.com/assignees",
        blobsUrl = "https://example.com/blobs",
        branchesUrl = "https://example.com/branches",
        cloneUrl = "https://example.com/clone",
        collaboratorsUrl = "https://example.com/collaborators",
        commentsUrl = "https://example.com/comments",
        commitsUrl = "https://example.com/commits",
        compareUrl = "https://example.com/compare",
        contentsUrl = "https://example.com/contents",
        contributorsUrl = "https://example.com/contributors",
        createdAt = "2024-01-01T12:00:00Z",
        defaultBranch = "main",
        deploymentsUrl = "https://example.com/deployments",
        description = "This is a fake repository for testing purposes.",
        disabled = false,
        downloadsUrl = "https://example.com/downloads",
        eventsUrl = "https://example.com/events",
        fork = false,
        forks = 10,
        forksCount = 10,
        forksUrl = "https://example.com/forks",
        fullName = "fakeuser/fakerepo",
        gitCommitsUrl = "https://example.com/git/commits",
        gitRefsUrl = "https://example.com/git/refs",
        gitTagsUrl = "https://example.com/git/tags",
        gitUrl = "git://example.com/fakeuser/fakerepo.git",
        hasDiscussions = false,
        hasDownloads = true,
        hasIssues = true,
        hasPages = true,
        hasProjects = true,
        hasWiki = true,
        homepage = "https://example.com",
        hooksUrl = "https://example.com/hooks",
        htmlUrl = "https://example.com/fakeuser/fakerepo",
        id = 123456,
        isTemplate = false,
        issueCommentUrl = "https://example.com/issues/comments",
        issueEventsUrl = "https://example.com/issues/events",
        issuesUrl = "https://example.com/issues",
        keysUrl = "https://example.com/keys",
        labelsUrl = "https://example.com/labels",
        language = "Kotlin",
        languagesUrl = "https://example.com/languages",
        license = License(
            name = "MIT",
            spdxId = "MIT",
            url = "https://opensource.org/licenses/MIT",
            key = "",
            nodeId = ""
        ),
        mergesUrl = "https://example.com/merges",
        milestonesUrl = "https://example.com/milestones",
        mirrorUrl = null,
        name = "fakerepo",
        networkCount = 5,
        nodeId = "fakeNodeId",
        notificationsUrl = "https://example.com/notifications",
        openIssues = 2,
        openIssuesCount = 2,
        organization = Organization(
            avatarUrl = "https://example.com/org/avatar",
            eventsUrl = "https://example.com/org/events",
            followersUrl = "https://example.com/org/followers",
            followingUrl = "https://example.com/org/following",
            gistsUrl = "https://example.com/org/gists",
            gravatarId = "fakeGravatarId",
            htmlUrl = "https://example.com/org",
            id = 98765,
            login = "fakeorg",
            nodeId = "fakeOrgNodeId",
            organizationsUrl = "https://example.com/orgs",
            receivedEventsUrl = "https://example.com/org/received_events",
            reposUrl = "https://example.com/org/repos",
            siteAdmin = false,
            starredUrl = "https://example.com/org/starred",
            subscriptionsUrl = "https://example.com/org/subscriptions",
            type = "Organization",
            url = "https://example.com/org"
        ),
        owner = Owner(
            avatarUrl = "https://example.com/user/avatar",
            eventsUrl = "https://example.com/user/events",
            followersUrl = "https://example.com/user/followers",
            followingUrl = "https://example.com/user/following",
            gistsUrl = "https://example.com/user/gists",
            gravatarId = "fakeGravatarId",
            htmlUrl = "https://example.com/user",
            id = 54321,
            login = "fakeuser",
            nodeId = "fakeUserNodeId",
            organizationsUrl = "https://example.com/user/orgs",
            receivedEventsUrl = "https://example.com/user/received_events",
            reposUrl = "https://example.com/user/repos",
            siteAdmin = false,
            starredUrl = "https://example.com/user/starred",
            subscriptionsUrl = "https://example.com/user/subscriptions",
            type = "User",
            url = "https://example.com/user"
        ),
        isPrivate = false,
        pullsUrl = "https://example.com/pulls",
        pushedAt = "2024-01-01T12:30:00Z",
        releasesUrl = "https://example.com/releases",
        size = 1024,
        sshUrl = "git@github.com:fakeuser/fakerepo.git",
        stargazersCount = 20,
        stargazersUrl = "https://example.com/stargazers",
        statusesUrl = "https://example.com/statuses",
        subscribersCount = 8,
        subscribersUrl = "https://example.com/subscribers",
        subscriptionUrl = "https://example.com/subscription",
        svnUrl = "https://example.com/svn/fakeuser/fakerepo",
        tagsUrl = "https://example.com/tags",
        teamsUrl = "https://example.com/teams",
        tempCloneToken = null,
        topics = listOf("fake", "test", "repository"),
        treesUrl = "https://example.com/trees",
        updatedAt = "2024-01-01T13:00:00Z",
        url = "https://example.com/fakeuser/fakerepo",
        visibility = "public",
        watchers = 15,
        watchersCount = 15,
        webCommitSignoffRequired = true
    )

    val fakeRepositoryIssuesResponse = RepositoryIssuesResponse(
        activeLockReason = "Some lock reason",
        assignee = "fakeassignee",
        assignees = listOf("fakeassignee1", "fakeassignee2"),
        authorAssociation = "MEMBER",
        body = "This is a fake issue for testing purposes.",
        closedAt = "2024-01-02T12:00:00Z",
        comments = 5,
        commentsUrl = "https://example.com/comments",
        createdAt = "2024-01-01T12:30:00Z",
        eventsUrl = "https://example.com/events",
        htmlUrl = "https://example.com/fakeuser/fakerepo/issues/1",
        id = 123,
        labels = listOf("bug", "enhancement"),
        labelsUrl = "https://example.com/labels",
        locked = false,
        milestone = "fake milestone",
        nodeId = "fakeNodeId",
        number = 1,
        performedViaGithubApp = null,
        reactions = Reactions(
            confused = 1,
            eyes = 2,
            heart = 3,
            hooray = 1,
            laugh = 2,
            rocket = 4,
            totalCount = 13,
            url = "https://example.com/reactions",
            upVote = 7,
            downVote = 1
        ),
        repositoryUrl = "https://example.com/fakeuser/fakerepo",
        state = "open",
        stateReason = null,
        timelineUrl = "https://example.com/timeline",
        title = "Fake Issue Title",
        updatedAt = "2024-01-02T13:00:00Z",
        url = "https://example.com/fakeuser/fakerepo/issues/1",
        user = User(
            avatarUrl = "https://example.com/user/avatar",
            eventsUrl = "https://example.com/user/events",
            followersUrl = "https://example.com/user/followers",
            followingUrl = "https://example.com/user/following",
            gistsUrl = "https://example.com/user/gists",
            gravatarId = "fakeGravatarId",
            htmlUrl = "https://example.com/user",
            id = 456,
            login = "fakeuser",
            nodeId = "fakeUserNodeId",
            organizationsUrl = "https://example.com/user/orgs",
            receivedEventsUrl = "https://example.com/user/received_events",
            reposUrl = "https://example.com/user/repos",
            siteAdmin = false,
            starredUrl = "https://example.com/user/starred",
            subscriptionsUrl = "https://example.com/user/subscriptions",
            type = "User",
            url = "https://example.com/user"
        )
    )

    val fakeRepositoryListResponse = mutableListOf(fakeRepositoryDetailsResponse)

    val fakeRepositoryIssuesListResponse = listOf(fakeRepositoryIssuesResponse)

    val fakeLocalRepositoryList = mutableListOf<LocalRepositoryItem>()
}